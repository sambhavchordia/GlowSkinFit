import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.utils.class_weight import compute_sample_weight

# Assuming TensorFlow 2.x
from tensorflow.keras import layers, models

# Load and preprocess the data
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2  # using 20% of the data for validation
)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/pbl dataset small/train',
    target_size=(200, 200),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/pbl dataset small/val',
    target_size=(200, 200),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Manually compute class weights
labels = train_generator.classes
class_weights = compute_sample_weight(
    class_weight='balanced',
    y=labels
)
unique_classes = np.unique(labels)
class_weights_dict = {class_label: np.mean(class_weights[labels == class_label]) for class_label in unique_classes}

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(len(train_generator.class_indices), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=50,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    class_weight=class_weights_dict
)

# Save the model
model.save('mynew_model.h5')
